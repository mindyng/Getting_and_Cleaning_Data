plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
demo(graphics)
bye()
rm(list=ls())
?switch
?df
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", #
                      nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')#
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
fread()
?for loop
?forloop
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
getwd()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(displ, hwy, data=mpg)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet, BodyWeight)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","baa")
created=h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
myapp <- oauth_app("github",
}
myapp <- oauth_app("github", key="aae1eb24810027a2f7e0",secret="768a3486a35efdb2b10d8684a9d7b3909dc5d211"
}
myapp <- oauth_app("github",#
  key = "aae1eb24810027a2f7e0",#
  secret = "768a3486a35efdb2b10d8684a9d7b3909dc5d211")
library(httr)
myapp <- oauth_app("github",#
  key = "aae1eb24810027a2f7e0",#
  secret = "768a3486a35efdb2b10d8684a9d7b3909dc5d211")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp
}
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)#
req <- GET("https://api.github.com/rate_limit", gtoken)#
stop_for_status(req)#
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))#
stop_for_status(req)#
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
myapp <- oauth_app("github",#
  key = "aae1eb24810027a2f7e0",#
  secret = "768a3486a35efdb2b10d8684a9d7b3909dc5d211")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)#
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)#
req <- GET("https://api.github.com/rate_limit", gtoken)#
stop_for_status(req)#
content(req)
gtoken <- config(token = github_token)#
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)#
stop_for_status(req)#
content(req)
gtoken <- config(token = github_token)#
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httpuv)
install.packages(httpuv)
install.packages("httpuv")
library(httr)
library(htpuv)
library(httpuv)
myapp <- oauth_app("github",key="46785ab95cfb92efbd20",secret = "#
3c706d37d5467a2d9a36469189f1fe059e6c2db2")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
'netstat'
netstat
netstat -a | grep LISTEN
"netstat -a | grep LISTEN"
str(gtoken)
homeTL=GET("https://api.github.com/users/jtleek/repos",myapp)
str(myapp)
homeTL=GET("https://api.github.com/users/jtleek/repos")
content(homeTL)
raw_result<-content(homeTL)
jsoned<-fromJSON(raw_result)
install.packages("jsonlite")
jsoned<-fromJSON(raw_result)
library(jsonlite)
jsoned<-fromJSON(raw_result)
str(jsoned)
names(myapp)
names(raw_result)
names(homeTL)
subset<-homeTL(homeTL$date)
subset<-homeTL$date
subset
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
json[1,1:4]
json2[1,1:4]
json2[1,1:7]
json2[1,1:10]
homeTL
str(homeTL)
names(homeTL)
subset<-homeTL$date
subset
subet<-homeTL$times
subset
subset(homeTL, name == "datasharing", "created_at")
subset(homeTL, names=="datasharing", )
subset(homeTL, names=="datasharing", "created_at")
library(RMySQL)
library(dplyr)
library("sqldf")
acs<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
head(acs)
sqldf("select*from acs where AGEP<50 and pwgtp1")
options(sqldf.driver = "SQLite")
sqldf("select*from acs where AGEP<50 and pwgtp1")
options(gsubfn.engine = "R")
sqldf("select*from acs where AGEP<50 and pwgtp1")
library(sqldf)
library("sqldf")
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs where AGEP <50 and pwgtp1")
sqldf("select" from acs where AGEP <50")
sqldf("select* from acs where AGEP <50")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
htmlCode
nchar(10)
nchar(con=10)
nchar(con$10)
con=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
x <- read.fwf(#
  file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
}
library(swirl)
swirl()
R.version.string
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(student2, sex_class, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
exit()
bye()
library(dplyr)
library(swirl)
swirl()
?chain
?gather
?separate
submit()
help()
skip()
students3
?gather
submit()
?spread
submit()
reset()
submit()
reset()
submit()
extract_numeric("class5")
?mutate
?mutate()
submit()
reset()
submit()
students4
?select
submit()
passed
failed
mutate(passed,passed=status)
?mutate
mutate(passed, passed=status, "passed")
passed<-passed%>%
mutate(status="passed")
failed<-failed%>%
mutate(status="failed")
bind_rows(passed,failed)
sat
?select
?separate
submit()
?gather
submit()
?select
?gather
submit()
?separate
submit()
?gather
submit()
exit()
bye()
library(swirl)
swirl()
submit()
library(plyr)#
library(ggplot2)#
library(data.table)
install.packages("data.table")
library(data.table)
if(!file.exists("./data")){dir.create("./data")}#
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"#
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
if(!file.exists("./data")){dir.create("./data")}#
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"#
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
NEI.DT = data.table(NEI)#
SCC.DT = data.table(SCC)
NEI <- readRDS("summarySCC_PM25.rds")#
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")#
SCC <- readRDS("Source_Classification_Code.rds")
g = ggplot(coal.emissions, aes(year, Emissions))#
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") + #
  labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Emissions from Coal Combustion for the US")
NEI.DT = data.table(NEI)#
SCC.DT = data.table(SCC)#
#
#Get SCC codes for all coal combustion-related sources. Use SCC.Level.Three var to do this.#
coal.scc = SCC.DT[grep("Coal", SCC.Level.Three), SCC]#
#
#Aggregate coal.scc Emissions by year.#
coal.emissions = NEI.DT[SCC %in% coal.scc, sum(Emissions), by = "year"]#
colnames(coal.emissions) <- c("year", "Emissions")
ls()
g = ggplot(coal.emissions, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") + #
  labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Emissions from Coal Combustion for the US")
dev.off()
png(filename = "plot4.png", width = 480, height = 480, units = "px")
g = ggplot(coal.emissions, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") + #
  labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Emissions from Coal Combustion for the US")
png(filename = "plot4.png", width = 480, height = 480, units = "px")
LosAngelesData <- NEI[which(NEI$fips == "06037"),]#
#
temp <- SCC[grep("Mobile Sources",SCC$SCC.Level.One),]#
LosAngelesMobile <- LosAngelesData[LosAngelesData$SCC %in% temp$SCC,]#
total5 <- c(sum(LosAngelesMobile$Emissions[which(LosAngelesMobile$year == 1999)]),sum(LosAngelesMobile$Emissions[which(LosAngelesMobile$year == 2002)]),sum(LosAngelesMobile$Emissions[which(LosAngelesMobile$year == 2005)]),sum(LosAngelesMobile$Emissions[which(LosAngelesMobile$year == 2008)]))#
#
info5 <- data.frame(Total = total5,Year = as.factor(year3), Country = rep("LosAngeles",times = 4))#
info4 <- data.frame(info4, Country = rep("Baltimore", times = 4))#
info5 <- as.data.frame(t(data.frame(t(info4), t(info5))))#
row.names(info5) <- c()#
#
ggplot(data=info5, aes(x=Year, y=Total,fill = Country)) + geom_bar(stat="identity", position=position_dodge()) + ggtitle("MotorVehicle Emissions between Baltimore and Los Angeles")
NEI$year <- factor(NEI$year, levels = c('1999', '2002', '2005', '2008'))
MD.onroad <- subset(NEI, fips == '24510' & type == 'ON-ROAD')#
CA.onroad <- subset(NEI, fips == '06037' & type == 'ON-ROAD')#
#
# Aggregates#
MD.DF <- aggregate(MD.onroad[, 'Emissions'], by = list(MD.onroad$year), sum)#
colnames(MD.DF) <- c('year', 'Emissions')#
MD.DF$City <- paste(rep('MD', 4))#
#
CA.DF <- aggregate(CA.onroad[, 'Emissions'], by = list(CA.onroad$year), sum)#
colnames(CA.DF) <- c('year', 'Emissions')#
CA.DF$City <- paste(rep('CA', 4))
DF <- as.data.frame(rbind(MD.DF, CA.DF))
ggplot(data = DF, aes(x = year, y = Emissions)) + geom_bar(aes(fill = year),stat = "identity") + guides(fill = F) + ggtitle('Total Emissions of Motor Vehicle Sources\nLos Angeles County, California vs. Baltimore City, Maryland') + ylab(expression('PM'[2.5])) + xlab('Year') + theme(legend.position = 'none') + facet_grid(. ~ City) + geom_text(aes(label = round(Emissions, 0), size = 1, hjust = 0.5, vjust = -1))
rm(list=ls())
ls()
library(plyr)
if(!file.exists("./data")){dir.create("./data")}#
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"#
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")#
#
#Unzip file and access files only for rest of program.#
unzip(zipfile="./data/Dataset.zip",exdir="./data")#
path_rf <- file.path("./data" , "UCI HAR Dataset")#
files<-list.files(path_rf, recursive=TRUE)
getwd()
getwd()
ActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)#
ActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
ActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
library(plyr)
ActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
getwd()
if(!file.exists("./data")){dir.create("./data")}#
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"#
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
unzip(zipfile="./data/Dataset.zip",exdir="./data")#
path_rf <- file.path("./data" , "UCI HAR Dataset")#
files<-list.files(path_rf, recursive=TRUE)
ActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)#
ActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)#
#
#Second-Subject column.#
SubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)#
SubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)#
#
#Third-Features column.#
FeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)#
FeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)#
#
#Merges the training and the test sets to create one data set.#
dataSubject <- rbind(SubjectTrain, SubjectTest)#
dataActivity<- rbind(ActivityTrain, ActivityTest)#
dataFeatures<- rbind(FeaturesTrain, FeaturesTest)#
#
names(dataSubject)<-c("subject")#
names(dataActivity)<- c("activity")#
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)#
names(dataFeatures)<- dataFeaturesNames$V2
Combine <- cbind(dataSubject, dataActivity)#
Data <- cbind(dataFeatures, Combine)#
#
#Extracts only measurements on the mean and standard deviation for each measurement.#
subFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]#
#
chosenNames<-c(as.character(subFeaturesNames), "subject", "activity" )#
Data<-subset(Data,select=chosenNames)#
#
#Uses descriptive activity names to name the activities in the data set. #
#
#1:Read descriptive activity names from "activity_labels.txt" file.#
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)#
#
#2:Factorize variable 'activity' in the data fame 'Data' using descriptive activity names.#
Data$activity<-factor(Data$activity, labels=activityLabels$V2)#
#
#Appropriately label the data set with descriptive variable names.#
names(Data)<-gsub("^t", "time", names(Data))#
names(Data)<-gsub("^f", "frequency", names(Data))#
names(Data)<-gsub("Acc", "Accelerometer", names(Data))#
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))#
names(Data)<-gsub("Mag", "Magnitude", names(Data))#
names(Data)<-gsub("BodyBody", "Body", names(Data))
library(plyr);#
DATA<-aggregate(. ~subject + activity, Data, mean)#
DATA<-DATA[order(DATA$subject,DATA$activity),]#
write.table(DATA, file = "tidydata.txt",row.name=FALSE)
write.table(DATA, file = "tidydata.txt",row.name=FALSE)
ls()
DATA
library(plyr);#
DATA<-aggregate(. ~subject + activity, Data, mean)#
DATA<-DATA[order(DATA$subject,DATA$activity),]
write.table(DATA, file = "tidydata.txt",row.name=FALSE)
